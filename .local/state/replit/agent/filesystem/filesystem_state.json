{"file_contents":{"README.md":{"content":"# üé¨ Movie Tracker\n\nA web application to track and manage your personal movie collection using The Movie Database (TMDB) API. Search for movies, add them to custom lists, rate them, and write reviews.\n\n## Features\n\n- üîç Search movies using TMDB API\n- üìù Add movies to personal lists (Watchlist, Watched, Favorites)\n- ‚≠ê Rate movies on a scale of 1-10\n- üìñ Write personal reviews\n- üóÇÔ∏è Filter movies by list type\n- üéØ Track how many times you've watched each movie\n\n## Prerequisites\n\nBefore running this application, make sure you have the following installed:\n\n- [Node.js](https://nodejs.org/) (v14 or higher)\n- [MySQL](https://www.mysql.com/) or [MariaDB](https://mariadb.org/)\n- A [TMDB API key](https://www.themoviedb.org/settings/api)\n\n## Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/RV-Spidey/movie-tracker.git\n   cd movie-tracker\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   - Copy `.env.example` to `.env`\n   - Fill in your database password and TMDB API key:\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env`:\n   ```\n   DB_PASSWORD=your_database_password\n   TMDB_API_KEY=your_tmdb_api_key\n   PORT=3000\n   ```\n\n4. **Set up the database**\n   \n   Create a MySQL/MariaDB database and table:\n   ```sql\n   CREATE DATABASE movie_tracker;\n   USE movie_tracker;\n   \n   CREATE TABLE movies (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       tmdb_id INT NOT NULL,\n       title VARCHAR(255) NOT NULL,\n       director VARCHAR(255),\n       actors TEXT,\n       description TEXT,\n       genre VARCHAR(255),\n       list_name ENUM('watchlist', 'watched', 'favorites') NOT NULL,\n       no_of_times_watched INT DEFAULT 0,\n       user_rating DECIMAL(3,1),\n       user_review TEXT,\n       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n       updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n       UNIQUE KEY unique_movie_list (tmdb_id, list_name)\n   );\n   ```\n\n## Usage\n\n1. **Start the server**\n   ```bash\n   npm start\n   ```\n\n2. **Open your browser**\n   Navigate to `http://localhost:3000`\n\n3. **Start tracking movies!**\n   - Search for movies using the search bar\n   - Click on a movie to see details and add it to your collection\n   - View your collection in the \"My Movie Collection\" section\n   - Filter by list type (Watchlist, Watched, Favorites)\n\n## API Endpoints\n\n### Movie Search\n- `GET /api/search?q=movie_name` - Search movies via TMDB API\n\n### Personal Movies\n- `GET /api/movies` - Get all movies from your collection\n- `POST /api/movies` - Add a movie to your collection\n- `DELETE /api/movies/:id` - Remove a movie from your collection\n\n## Project Structure\n\n```\nmovie-tracker/\n‚îú‚îÄ‚îÄ server.js              # Express server and API endpoints\n‚îú‚îÄ‚îÄ package.json           # Node.js dependencies and scripts\n‚îú‚îÄ‚îÄ .env.example          # Environment variables template\n‚îú‚îÄ‚îÄ .gitignore            # Git ignore file\n‚îú‚îÄ‚îÄ README.md             # Project documentation\n‚îî‚îÄ‚îÄ public/               # Frontend files\n    ‚îú‚îÄ‚îÄ index.html        # Main HTML file\n    ‚îú‚îÄ‚îÄ app.js            # Client-side JavaScript\n    ‚îî‚îÄ‚îÄ styles.css        # CSS styles\n```\n\n## Database Schema\n\nThe `movies` table includes the following fields:\n\n| Field | Type | Description |\n|-------|------|-------------|\n| id | INT (PK) | Auto-incrementing primary key |\n| tmdb_id | INT | The Movie Database ID |\n| title | VARCHAR(255) | Movie title |\n| director | VARCHAR(255) | Movie director |\n| actors | TEXT | Cast members |\n| description | TEXT | Movie overview/plot |\n| genre | VARCHAR(255) | Movie genres |\n| list_name | ENUM | Collection list (watchlist, watched, favorites) |\n| no_of_times_watched | INT | Number of times watched |\n| user_rating | DECIMAL(3,1) | Personal rating (1.0-10.0) |\n| user_review | TEXT | Personal review |\n| created_at | TIMESTAMP | Record creation time |\n| updated_at | TIMESTAMP | Last update time |\n\n## Getting TMDB API Key\n\n1. Go to [The Movie Database](https://www.themoviedb.org/)\n2. Create an account or log in\n3. Go to Settings ‚Üí API\n4. Request an API key\n5. Copy your API key to the `.env` file\n\n## Development\n\n### Running in Development Mode\n```bash\nnpm run dev\n```\n\n### Dependencies\n- **Express.js** - Web framework\n- **MySQL2** - Database driver\n- **Axios** - HTTP client for API requests\n- **Dotenv** - Environment variable management\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Acknowledgments\n\n- [The Movie Database (TMDB)](https://www.themoviedb.org/) for providing the movie data API\n- [Express.js](https://expressjs.com/) for the web framework\n- [MySQL](https://www.mysql.com/) for the database system\n\n---\n\nHappy movie tracking! üçø\n","size_bytes":5044},"WARP.md":{"content":"# WARP.md\n\nThis file provides guidance to WARP (warp.dev) when working with code in this repository.\n\n## Development Commands\n\n### Environment Setup\n```bash\n# Copy environment template and configure\ncp .env.example .env\n# Edit .env with your DB_PASSWORD and TMDB_API_KEY\n\n# Install dependencies\nnpm install\n```\n\n### Running the Application\n```bash\n# Start the server (production)\nnpm start\n\n# Start in development mode\nnpm run dev\n\n# Deploy to Railway (requires Railway CLI)\nrailway deploy\n\n# Connect to Railway PostgreSQL\nrailway connect postgresql\n```\n\n### Database Setup\n\n#### Local PostgreSQL Setup\nFor local development, create PostgreSQL database and table:\n```sql\nCREATE DATABASE movie_tracker;\n\\c movie_tracker;\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    tmdb_id INTEGER NOT NULL,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    actors TEXT,\n    description TEXT,\n    genre VARCHAR(255),\n    list_name VARCHAR(20) NOT NULL CHECK (list_name IN ('watchlist', 'watched', 'favorites')),\n    no_of_times_watched INTEGER DEFAULT 0,\n    user_rating DECIMAL(3,1),\n    user_review TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE (tmdb_id, list_name)\n);\n\n-- Create trigger to update updated_at column\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\nCREATE TRIGGER update_movies_updated_at BEFORE UPDATE\nON movies FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n```\n\n#### Railway Deployment Setup\n1. **Create Railway Project**: Go to [railway.app](https://railway.app) and create a new project\n2. **Add PostgreSQL Database**: Add a PostgreSQL service to your project\n3. **Deploy Application**: Connect your GitHub repository or deploy from CLI\n4. **Environment Variables**: Set the following in Railway dashboard:\n   - `TMDB_API_KEY`: Your TMDB API key\n   - `NODE_ENV`: Set to `production`\n   - `DATABASE_URL`: Automatically provided by Railway PostgreSQL service\n5. **Run Database Setup**: Connect to Railway PostgreSQL and run the schema above\n\n### Testing\nCurrently no test framework is configured. Tests would need to be set up from scratch.\n\n## Architecture Overview\n\n### Application Structure\nThis is a simple full-stack web application with a traditional client-server architecture:\n\n- **Backend**: Node.js/Express.js server (`server.js`) serving both API endpoints and static files\n- **Frontend**: Vanilla JavaScript SPA in the `public/` directory\n- **Database**: MySQL/MariaDB with a single `movies` table\n- **External API**: Integrates with The Movie Database (TMDB) API for movie search\n\n### Key Components\n\n**Server Architecture (`server.js`)**:\n- Single Express server file handling all backend logic\n- Direct database connection using mysql2 (no ORM)\n- Three main API endpoints: search, CRUD operations for movies\n- Static file serving for the frontend\n\n**Frontend Architecture**:\n- `index.html`: Single-page structure with modal-based movie details\n- `app.js`: All client-side logic including API calls, DOM manipulation, and event handling\n- `styles.css`: Complete styling for the application\n\n**Data Flow**:\n1. User searches movies ‚Üí Frontend calls `/api/search` ‚Üí Server proxies to TMDB API\n2. User adds movie ‚Üí Frontend posts to `/api/movies` ‚Üí Server inserts to database\n3. User views collection ‚Üí Frontend calls `/api/movies` ‚Üí Server queries database\n\n### Database Schema\nSingle `movies` table with these key relationships:\n- `tmdb_id`: Links to TMDB external ID\n- `list_name`: ENUM determining movie categorization (watchlist/watched/favorites)\n- Unique constraint on `(tmdb_id, list_name)` prevents duplicate entries per list\n\n## Environment Variables\n\n### Local Development\nRequired variables in `.env`:\n- `DB_HOST`: PostgreSQL host (default: localhost)\n- `DB_PORT`: PostgreSQL port (default: 5432)\n- `DB_USER`: PostgreSQL username (default: postgres)\n- `DB_PASSWORD`: PostgreSQL password\n- `DB_NAME`: Database name (default: movie_tracker)\n- `TMDB_API_KEY`: API key from themoviedb.org\n- `NODE_ENV`: Environment (development/production)\n- `PORT`: Server port (optional, defaults to 3000)\n\n### Railway Production\nRailway automatically provides:\n- `DATABASE_URL`: Complete PostgreSQL connection string\n- `PORT`: Assigned by Railway\n\nManually set in Railway dashboard:\n- `TMDB_API_KEY`: Your TMDB API key\n- `NODE_ENV`: Set to 'production'\n\n## API Endpoints\n- `GET /api/search?q={query}`: Proxy search to TMDB API\n- `GET /api/movies`: Retrieve user's movie collection\n- `POST /api/movies`: Add movie to collection\n- `DELETE /api/movies/:id`: Remove movie from collection\n\n## Development Guidelines\n\n### Code Style\n- Uses ES6+ features (async/await, arrow functions, template literals)\n- Frontend uses vanilla JavaScript with modern DOM APIs\n- Server uses CommonJS modules (require/module.exports)\n\n### Database Operations\n- No ORM - uses raw SQL queries with mysql2\n- All database operations are synchronous within request handlers\n- Error handling returns JSON error responses\n\n### Frontend Patterns\n- Event-driven architecture with global event listeners\n- Modal-based UI for movie details and actions\n- API calls use modern fetch() API\n- DOM manipulation uses vanilla JavaScript methods\n\n### Security Considerations\n- API keys stored in environment variables\n- Database password in environment variables\n- Frontend sanitizes user input for SQL injection prevention through parameterized queries\n- TMDB API key exposed to frontend (consider proxy pattern for production)\n","size_bytes":5633},"app-new.js":{"content":"// Global variables\nlet searchTimeout = null;\nlet cachedMovies = [];\n\n// Utility functions\nconst API_BASE = '';\nconst TMDB_IMAGE_BASE = 'https://image.tmdb.org/t/p/w500';\n\n// DOM helpers\nconst $ = (selector) => document.querySelector(selector);\nconst $$ = (selector) => document.querySelectorAll(selector);\n\n// Show/hide elements\nconst show = (element) => element?.classList.remove('hidden');\nconst hide = (element) => element?.classList.add('hidden');\n\n// Initialize app based on current page\ndocument.addEventListener('DOMContentLoaded', () => {\n    const currentPage = window.location.pathname.split('/').pop() || 'index.html';\n    \n    switch (currentPage) {\n        case 'index.html':\n        case '':\n            initHomePage();\n            break;\n        case 'watchlist.html':\n            initWatchlistPage();\n            break;\n        case 'watched.html':\n            initWatchedPage();\n            break;\n        case 'film.html':\n            initFilmPage();\n            break;\n    }\n});\n\n// Home Page Functions\nfunction initHomePage() {\n    const searchInput = $('#searchInput');\n    const clearSearchBtn = $('#clearSearch');\n    const searchHint = $('#searchHint');\n    const resultsGrid = $('#resultsGrid');\n    const loadingRow = $('#loadingRow');\n    const emptyState = $('#emptyState');\n\n    if (!searchInput) return;\n\n    // Search input handler\n    searchInput.addEventListener('input', (e) => {\n        const query = e.target.value.trim();\n        \n        if (query.length === 0) {\n            clearSearch();\n            return;\n        }\n\n        show(clearSearchBtn);\n        hide(searchHint);\n        \n        // Debounce search\n        clearTimeout(searchTimeout);\n        searchTimeout = setTimeout(() => {\n            searchMovies(query);\n        }, 300);\n    });\n\n    // Clear search button\n    clearSearchBtn?.addEventListener('click', clearSearch);\n\n    function clearSearch() {\n        searchInput.value = '';\n        hide(clearSearchBtn);\n        show(searchHint);\n        resultsGrid.innerHTML = '';\n        show(emptyState);\n        emptyState.textContent = 'Start typing to search for a movie.';\n    }\n\n    async function searchMovies(query) {\n        show(loadingRow);\n        hide(emptyState);\n        resultsGrid.innerHTML = '';\n\n        try {\n            const response = await fetch(`${API_BASE}/api/search?q=${encodeURIComponent(query)}`);\n            const movies = await response.json();\n\n            hide(loadingRow);\n\n            if (!movies || movies.length === 0) {\n                show(emptyState);\n                emptyState.textContent = 'No movies found. Try a different search.';\n                return;\n            }\n\n            displaySearchResults(movies);\n        } catch (error) {\n            console.error('Search error:', error);\n            hide(loadingRow);\n            show(emptyState);\n            emptyState.textContent = 'Error searching movies. Please try again.';\n        }\n    }\n\n    function displaySearchResults(movies) {\n        resultsGrid.innerHTML = movies.map(movie => `\n            <div class=\"movie-card poster-hover\" onclick=\"goToMovieDetails(${movie.id})\">\n                <a class=\"movie-poster-link\">\n                    <img \n                        src=\"${movie.poster_path ? TMDB_IMAGE_BASE + movie.poster_path : '/api/placeholder/300/450'}\" \n                        alt=\"${movie.title}\"\n                        class=\"movie-card-poster\"\n                        onerror=\"this.src='/api/placeholder/300/450'\"\n                    >\n                </a>\n                <div class=\"movie-card-content\">\n                    <h3 class=\"movie-card-title\">${movie.title}</h3>\n                    <p class=\"movie-card-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown'}</p>\n                </div>\n            </div>\n        `).join('');\n    }\n}\n\n// Watchlist Page Functions\nfunction initWatchlistPage() {\n    const watchlistGrid = $('#watchlistGrid');\n    const emptyWatchlist = $('#emptyWatchlist');\n    const clearWatchlistBtn = $('#clearWatchlist');\n\n    loadMoviesByList('watchlist', watchlistGrid, emptyWatchlist);\n\n    clearWatchlistBtn?.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear your entire watchlist?')) {\n            clearMoviesList('watchlist');\n        }\n    });\n}\n\n// Watched Page Functions\nfunction initWatchedPage() {\n    const watchedGrid = $('#watchedGrid');\n    const emptyWatched = $('#emptyWatched');\n    const clearWatchedBtn = $('#clearWatched');\n\n    loadMoviesByList('watched', watchedGrid, emptyWatched);\n\n    clearWatchedBtn?.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear your entire watched list?')) {\n            clearMoviesList('watched');\n        }\n    });\n}\n\n// Film Details Page Functions\nfunction initFilmPage() {\n    const movieId = getMovieIdFromUrl();\n    if (movieId) {\n        loadMovieDetails(movieId);\n    }\n}\n\n// Shared Functions\nasync function loadMoviesByList(listType, gridElement, emptyElement) {\n    if (!gridElement || !emptyElement) return;\n\n    try {\n        const response = await fetch(`${API_BASE}/api/movies`);\n        const allMovies = await response.json();\n        const filteredMovies = allMovies.filter(movie => movie.list_name === listType);\n\n        if (filteredMovies.length === 0) {\n            show(emptyElement);\n            gridElement.innerHTML = '';\n            return;\n        }\n\n        hide(emptyElement);\n        displayMovieGrid(filteredMovies, gridElement);\n    } catch (error) {\n        console.error(`Error loading ${listType}:`, error);\n        show(emptyElement);\n        emptyElement.textContent = `Error loading ${listType}. Please refresh the page.`;\n    }\n}\n\nfunction displayMovieGrid(movies, gridElement) {\n    gridElement.innerHTML = movies.map(movie => `\n        <div class=\"movie-card poster-hover\">\n            <a href=\"film.html?id=${movie.tmdb_id}\" class=\"movie-poster-link\">\n                <img \n                    src=\"${movie.poster_path ? TMDB_IMAGE_BASE + movie.poster_path : '/api/placeholder/300/450'}\" \n                    alt=\"${movie.title}\"\n                    class=\"movie-card-poster\"\n                    onerror=\"this.src='/api/placeholder/300/450'\"\n                >\n            </a>\n            <div class=\"movie-card-content\">\n                <h3 class=\"movie-card-title\">${movie.title}</h3>\n                <p class=\"movie-card-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Year unknown'}</p>\n                ${movie.user_rating ? `<p class=\"movie-card-year\">‚≠ê ${movie.user_rating}/10</p>` : ''}\n            </div>\n        </div>\n    `).join('');\n}\n\nasync function loadMovieDetails(tmdbId) {\n    const movieDetails = $('#movieDetails');\n    if (!movieDetails) return;\n\n    try {\n        // First try to get from our database\n        const dbResponse = await fetch(`${API_BASE}/api/movies`);\n        const userMovies = await dbResponse.json();\n        const userMovie = userMovies.find(movie => movie.tmdb_id == tmdbId);\n\n        // Get full details from TMDB\n        const tmdbResponse = await fetch(`${API_BASE}/api/search?q=${tmdbId}`);\n        const tmdbMovies = await tmdbResponse.json();\n        const tmdbMovie = tmdbMovies.find(movie => movie.id == tmdbId) || tmdbMovies[0];\n\n        if (!tmdbMovie) {\n            movieDetails.innerHTML = '<p>Movie not found.</p>';\n            return;\n        }\n\n        displayMovieDetails(tmdbMovie, userMovie);\n    } catch (error) {\n        console.error('Error loading movie details:', error);\n        movieDetails.innerHTML = '<p>Error loading movie details.</p>';\n    }\n}\n\nfunction displayMovieDetails(movie, userMovie) {\n    const movieDetails = $('#movieDetails');\n    const isInCollection = !!userMovie;\n\n    movieDetails.innerHTML = `\n        <div class=\"movie-details-grid\">\n            <div>\n                <img \n                    src=\"${movie.poster_path ? TMDB_IMAGE_BASE + movie.poster_path : '/api/placeholder/300/450'}\" \n                    alt=\"${movie.title}\"\n                    class=\"movie-card-poster\"\n                    style=\"border-radius: 1rem;\"\n                    onerror=\"this.src='/api/placeholder/300/450'\"\n                >\n            </div>\n            <div class=\"details-info\">\n                <h1 class=\"details-title\">${movie.title}</h1>\n                <p class=\"details-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Year unknown'}</p>\n                \n                ${movie.vote_average ? `<p>‚≠ê ${movie.vote_average.toFixed(1)}/10 (TMDB Rating)</p>` : ''}\n                ${userMovie?.user_rating ? `<p>üéØ Your Rating: ${userMovie.user_rating}/10</p>` : ''}\n                ${userMovie?.no_of_times_watched > 0 ? `<p>üëÅÔ∏è Watched ${userMovie.no_of_times_watched} time(s)</p>` : ''}\n                \n                <h3 class=\"details-plot-title\">Plot</h3>\n                <p class=\"details-plot\">${movie.overview || 'No plot description available.'}</p>\n                \n                ${movie.genre_ids && movie.genre_ids.length > 0 ? `\n                    <div class=\"details-genres\">\n                        ${movie.genre_ids.map(genreId => `<span class=\"genre-tag\">Genre ${genreId}</span>`).join('')}\n                    </div>\n                ` : ''}\n                \n                <div style=\"margin-top: 2rem; display: flex; gap: 1rem; flex-wrap: wrap;\">\n                    ${!isInCollection ? `\n                        <button onclick=\"addToList('watchlist', ${movie.id})\" class=\"btn btn-primary\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Add to Watchlist\n                        </button>\n                        <button onclick=\"addToList('watched', ${movie.id})\" class=\"btn btn-secondary\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Mark as Watched\n                        </button>\n                    ` : `\n                        <p style=\"color: #6ee7b7;\">‚úì In your ${userMovie.list_name} list</p>\n                        <button onclick=\"removeFromCollection(${userMovie.id})\" class=\"btn clear-btn-main\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Remove from Collection\n                        </button>\n                    `}\n                </div>\n                \n                ${userMovie?.user_review ? `\n                    <div style=\"margin-top: 1.5rem; padding: 1rem; background-color: rgba(255,255,255,0.05); border-radius: 0.5rem;\">\n                        <h4>Your Review:</h4>\n                        <p style=\"color: rgba(255,255,255,0.8); margin-top: 0.5rem;\">${userMovie.user_review}</p>\n                    </div>\n                ` : ''}\n            </div>\n        </div>\n    `;\n}\n\n// Action Functions\nasync function addToList(listType, tmdbId) {\n    try {\n        // Get movie details first\n        const response = await fetch(`${API_BASE}/api/search?q=${tmdbId}`);\n        const movies = await response.json();\n        const movie = movies.find(m => m.id == tmdbId) || movies[0];\n\n        if (!movie) {\n            alert('Movie not found');\n            return;\n        }\n\n        const movieData = {\n            tmdb_id: movie.id,\n            title: movie.title,\n            director: '',\n            actors: '',\n            description: movie.overview || '',\n            genre: movie.genre_ids ? movie.genre_ids.join(',') : '',\n            list_name: listType,\n            no_of_times_watched: listType === 'watched' ? 1 : 0,\n            user_rating: null,\n            user_review: ''\n        };\n\n        const addResponse = await fetch(`${API_BASE}/api/movies`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(movieData)\n        });\n\n        const result = await addResponse.json();\n\n        if (addResponse.ok) {\n            alert(`Movie added to ${listType}!`);\n            // Reload current page\n            window.location.reload();\n        } else {\n            alert('Error adding movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error adding movie:', error);\n        alert('Error adding movie to collection.');\n    }\n}\n\nasync function removeFromCollection(movieId) {\n    if (!confirm('Are you sure you want to remove this movie from your collection?')) {\n        return;\n    }\n\n    try {\n        const response = await fetch(`${API_BASE}/api/movies/${movieId}`, {\n            method: 'DELETE'\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            alert('Movie removed from collection!');\n            window.location.reload();\n        } else {\n            alert('Error removing movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error removing movie:', error);\n        alert('Error removing movie from collection.');\n    }\n}\n\nasync function clearMoviesList(listType) {\n    try {\n        const response = await fetch(`${API_BASE}/api/movies`);\n        const allMovies = await response.json();\n        const moviesToDelete = allMovies.filter(movie => movie.list_name === listType);\n\n        for (const movie of moviesToDelete) {\n            await fetch(`${API_BASE}/api/movies/${movie.id}`, {\n                method: 'DELETE'\n            });\n        }\n\n        alert(`${listType} cleared!`);\n        window.location.reload();\n    } catch (error) {\n        console.error(`Error clearing ${listType}:`, error);\n        alert(`Error clearing ${listType}.`);\n    }\n}\n\n// Navigation Functions\nfunction goToMovieDetails(tmdbId) {\n    window.location.href = `film.html?id=${tmdbId}`;\n}\n\nfunction getMovieIdFromUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('id');\n}\n\n// Export functions for global access\nwindow.addToList = addToList;\nwindow.removeFromCollection = removeFromCollection;\nwindow.goToMovieDetails = goToMovieDetails;\n","size_bytes":14061},"replit.md":{"content":"# Overview\n\nMovie Tracker is a personal movie management web application that allows users to search for movies using The Movie Database (TMDB) API and organize them into custom lists. Users can maintain watchlists, track watched movies, add ratings and reviews, and monitor viewing frequency. The application provides a clean, modern interface for discovering and cataloging films with personal metadata.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Static Web App**: Multi-page application using vanilla HTML, CSS, and JavaScript\n- **Page Structure**: Separate pages for home (search), watchlist, watched movies, and individual film details\n- **Client-Side Routing**: Page-based navigation with JavaScript initialization based on current URL\n- **Responsive Design**: CSS Grid and Flexbox layout with mobile-first responsive design\n- **State Management**: Global variables and DOM manipulation for UI state\n- **API Communication**: Fetch API calls to backend endpoints for movie data\n\n## Backend Architecture\n- **Node.js/Express Server**: RESTful API server handling movie operations and TMDB integration\n- **Static File Serving**: Express static middleware serving frontend assets from public directory\n- **API Proxy Pattern**: Backend acts as proxy between frontend and TMDB API to hide API keys\n- **Environment Configuration**: dotenv for managing sensitive configuration data\n\n## Data Storage\n- **PostgreSQL Database**: Primary data store for user's movie lists and metadata\n- **Connection Pool**: pg library with connection pooling for efficient database access\n- **Schema Design**: Single movies table with columns for TMDB ID, personal ratings, reviews, list categorization, and view counts\n- **Deployment Flexibility**: Supports both Railway cloud PostgreSQL and local development setups\n\n## Movie Data Integration\n- **TMDB API Integration**: Real-time movie search and metadata retrieval\n- **Adult Content Filtering**: Client and server-side filtering to exclude adult content\n- **Image Handling**: TMDB CDN integration for movie posters and artwork\n- **Data Normalization**: Mapping between TMDB data structure and internal database schema\n\n## Deployment Configuration\n- **Railway Platform**: Cloud deployment with automatic PostgreSQL provisioning\n- **Environment Detection**: Different database connection strategies for local vs production\n- **Process Management**: Railway.json configuration for deployment and restart policies\n- **SSL Configuration**: Conditional SSL settings based on environment\n\n# External Dependencies\n\n## Third-Party Services\n- **The Movie Database (TMDB) API**: Primary data source for movie information, search, and imagery\n- **Railway**: Cloud hosting platform providing PostgreSQL database and application hosting\n- **Font Awesome**: Icon library for UI components\n- **Google Fonts (Inter)**: Typography and font rendering\n\n## Core Dependencies\n- **Express.js**: Web server framework for API endpoints and static file serving\n- **PostgreSQL (pg)**: Database driver for connection management and query execution\n- **Axios**: HTTP client for TMDB API communication\n- **dotenv**: Environment variable management for configuration\n\n## Development Tools\n- **Node.js Runtime**: JavaScript execution environment (v14+ required)\n- **npm Package Manager**: Dependency management and script execution\n- **Railway CLI**: Deployment and database management tools\n\n## Database Requirements\n- **PostgreSQL**: Primary database system with support for connection pooling\n- **SSL Support**: Required for production deployments on Railway platform\n- **Schema Migrations**: Manual database setup through provided scripts","size_bytes":3730},"server.js":{"content":"require('dotenv').config();\nconst axios = require('axios');\nconst { Pool } = require('pg');\n\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 5000;\n\napp.use(express.json());\napp.use(express.static('public'));\n\n//Database connection\n// Railway provides DATABASE_URL, but we'll also support individual variables for local development\nconst pool = new Pool(\n    process.env.DATABASE_URL\n        ? {\n              connectionString: process.env.DATABASE_URL,\n              ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n          }\n        : {\n              host: process.env.DB_HOST || 'localhost',\n              port: process.env.DB_PORT || 5432,\n              user: process.env.DB_USER || 'postgres',\n              password: process.env.DB_PASSWORD,\n              database: process.env.DB_NAME || 'movie_tracker'\n          }\n);\n\n// Test database connection\npool.connect((err, client, release) => {\n    if (err) {\n        console.error('Error connecting to PostgreSQL database:', err.stack);\n        return;\n    }\n    console.log('Connected to PostgreSQL database');\n    release();\n});\n\n//the api endpoints\n\n// Step 1: Create the API Search Endpoint\n// This endpoint will handle requests from your frontend to search the TMDB API.\napp.get('/api/search', async (req, res) => {\n    try {\n        const query = req.query.q; // Get the search query from the URL\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/search/movie?api_key=${process.env.TMDB_API_KEY}&query=${query}&include_adult=false`\n        );\n        // Additional client-side filtering to ensure no adult content\n        const filteredResults = response.data.results.filter(movie => !movie.adult);\n        res.json(filteredResults); // Send the filtered search results back as JSON\n    } catch (error) {\n        console.error('TMDB API Error:', error);\n        res.status(500).json({ error: 'An error occurred while fetching data from the movie database.' });\n    }\n});\n\n// Get movie details by TMDB ID\napp.get('/api/movie/:tmdbId', async (req, res) => {\n    try {\n        const tmdbId = req.params.tmdbId;\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${process.env.TMDB_API_KEY}`\n        );\n        \n        // Filter out adult content\n        if (response.data.adult) {\n            res.status(404).json({ error: 'Content not available' });\n            return;\n        }\n        \n        res.json(response.data); // Send the movie details back as JSON\n    } catch (error) {\n        console.error('TMDB API Error:', error);\n        if (error.response && error.response.status === 404) {\n            res.status(404).json({ error: 'Movie not found' });\n        } else {\n            res.status(500).json({ error: 'An error occurred while fetching movie details.' });\n        }\n    }\n});\n\n// Step 2: Create the Get Movies Endpoint\n// This endpoint fetches all the movies from your personal PostgreSQL database.\napp.get('/api/movies', async (req, res) => {\n    try {\n        const result = await pool.query('SELECT * FROM movies ORDER BY created_at DESC');\n        res.json(result.rows); // Send the movies from your database back to the frontend\n    } catch (err) {\n        console.error('Database error:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Step 3: Create the Add/Delete Movies Endpoints\n// These endpoints handle saving and deleting movies in your database.\napp.post('/api/movies', async (req, res) => {\n    const { tmdb_id, title, director, actors, description, genre, list_name, no_of_times_watched, user_rating, user_review, poster_path, release_date } = req.body;\n    \n    // First check if the table has the new columns, if not add them\n    try {\n        await pool.query(`\n            ALTER TABLE movies \n            ADD COLUMN IF NOT EXISTS poster_path TEXT,\n            ADD COLUMN IF NOT EXISTS release_date DATE\n        `);\n    } catch (alterError) {\n        console.log('Table already has new columns or error:', alterError.message);\n    }\n    \n    const sql = `\n        INSERT INTO movies (tmdb_id, title, director, actors, description, genre, list_name, no_of_times_watched, user_rating, user_review, poster_path, release_date)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n        RETURNING id\n    `;\n    try {\n        const result = await pool.query(sql, [tmdb_id, title, director, actors, description, genre, list_name, no_of_times_watched, user_rating, user_review, poster_path, release_date]);\n        res.json({ id: result.rows[0].id, message: 'Movie added successfully!' });\n    } catch (err) {\n        console.error('Database error:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\napp.delete('/api/movies/:id', async (req, res) => {\n    const { id } = req.params; // Get the movie ID from the URL\n    const sql = 'DELETE FROM movies WHERE id = $1';\n    try {\n        await pool.query(sql, [id]);\n        res.json({ message: 'Movie deleted successfully!' });\n    } catch (err) {\n        console.error('Database error:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// Update movie list (move between watchlist and watched)\napp.put('/api/movies/:id', async (req, res) => {\n    const { id } = req.params;\n    const { list_name, no_of_times_watched } = req.body;\n    \n    const sql = 'UPDATE movies SET list_name = $1, no_of_times_watched = $2 WHERE id = $3';\n    try {\n        const result = await pool.query(sql, [list_name, no_of_times_watched || 0, id]);\n        if (result.rowCount === 0) {\n            res.status(404).json({ error: 'Movie not found' });\n        } else {\n            res.json({ message: 'Movie updated successfully!' });\n        }\n    } catch (err) {\n        console.error('Database error:', err);\n        res.status(500).json({ error: err.message });\n    }\n});\n\napp.listen(port, '0.0.0.0', () => {\n    console.log(`Server is listening on port ${port}`);\n});\n","size_bytes":6041},"setup-db.js":{"content":"require('dotenv').config();\nconst { Pool } = require('pg');\n\nconst pool = new Pool(\n    process.env.DATABASE_URL\n        ? {\n              connectionString: process.env.DATABASE_URL,\n              ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n          }\n        : {\n              host: process.env.DB_HOST || 'localhost',\n              port: process.env.DB_PORT || 5432,\n              user: process.env.DB_USER || 'postgres',\n              password: process.env.DB_PASSWORD,\n              database: process.env.DB_NAME || 'movie_tracker'\n          }\n);\n\nasync function setupDatabase() {\n    try {\n        console.log('üöÄ Setting up database schema...');\n        const client = await pool.connect();\n        \n        // Check if movies table exists\n        const tableCheck = await client.query(`\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE table_schema = 'public' \n                AND table_name = 'movies'\n            );\n        `);\n        \n        if (tableCheck.rows[0].exists) {\n            console.log('‚úÖ Movies table already exists');\n            const movieCount = await client.query('SELECT COUNT(*) FROM movies');\n            console.log(`üìä Current movies in database: ${movieCount.rows[0].count}`);\n        } else {\n            console.log('üî® Creating movies table...');\n            \n            await client.query(`\n                CREATE TABLE movies (\n                    id SERIAL PRIMARY KEY,\n                    tmdb_id INTEGER NOT NULL,\n                    title VARCHAR(255) NOT NULL,\n                    director VARCHAR(255),\n                    actors TEXT,\n                    description TEXT,\n                    genre VARCHAR(255),\n                    list_name VARCHAR(20) NOT NULL CHECK (list_name IN ('watchlist', 'watched', 'favorites')),\n                    no_of_times_watched INTEGER DEFAULT 0,\n                    user_rating DECIMAL(3,1),\n                    user_review TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    UNIQUE (tmdb_id, list_name)\n                );\n            `);\n            \n            console.log('‚úÖ Movies table created successfully');\n            \n            // Create trigger function for updated_at\n            await client.query(`\n                CREATE OR REPLACE FUNCTION update_updated_at_column()\n                RETURNS TRIGGER AS $$\n                BEGIN\n                    NEW.updated_at = CURRENT_TIMESTAMP;\n                    RETURN NEW;\n                END;\n                $$ language 'plpgsql';\n            `);\n            \n            // Create trigger\n            await client.query(`\n                CREATE TRIGGER update_movies_updated_at \n                BEFORE UPDATE ON movies \n                FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n            `);\n            \n            console.log('‚úÖ Database triggers created successfully');\n        }\n        \n        client.release();\n        await pool.end();\n        console.log('üéâ Database setup completed successfully!');\n    } catch (error) {\n        console.error('‚ùå Database setup failed:', error.message);\n        console.error('Full error:', error);\n        process.exit(1);\n    }\n}\n\nsetupDatabase();\n","size_bytes":3386},"test-db.js":{"content":"require('dotenv').config();\nconst { Pool } = require('pg');\n\nconsole.log('Environment variables:');\nconsole.log('DATABASE_URL:', process.env.DATABASE_URL ? 'Set (length: ' + process.env.DATABASE_URL.length + ')' : 'Not set');\nconsole.log('NODE_ENV:', process.env.NODE_ENV);\n\nconst pool = new Pool(\n    process.env.DATABASE_URL\n        ? {\n              connectionString: process.env.DATABASE_URL,\n              ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n          }\n        : {\n              host: process.env.DB_HOST || 'localhost',\n              port: process.env.DB_PORT || 5432,\n              user: process.env.DB_USER || 'postgres',\n              password: process.env.DB_PASSWORD,\n              database: process.env.DB_NAME || 'movie_tracker'\n          }\n);\n\nasync function testConnection() {\n    try {\n        console.log('\\nTesting database connection...');\n        const client = await pool.connect();\n        console.log('‚úÖ Successfully connected to PostgreSQL database!');\n        \n        // Test a simple query\n        const result = await client.query('SELECT NOW() as current_time');\n        console.log('‚úÖ Test query successful. Current time:', result.rows[0].current_time);\n        \n        // Check if movies table exists\n        const tableCheck = await client.query(`\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE table_schema = 'public' \n                AND table_name = 'movies'\n            );\n        `);\n        \n        if (tableCheck.rows[0].exists) {\n            console.log('‚úÖ Movies table exists');\n            const movieCount = await client.query('SELECT COUNT(*) FROM movies');\n            console.log(`üìä Movies in database: ${movieCount.rows[0].count}`);\n        } else {\n            console.log('‚ùå Movies table does not exist - needs to be created');\n        }\n        \n        client.release();\n        await pool.end();\n        console.log('\\nüéâ Database test completed successfully!');\n    } catch (error) {\n        console.error('‚ùå Database connection failed:', error.message);\n        console.error('Full error:', error);\n        process.exit(1);\n    }\n}\n\ntestConnection();\n","size_bytes":2228},"public/app.js":{"content":"// Global variables\nlet searchTimeout = null;\nlet cachedMovies = [];\n\n// Utility functions\nconst API_BASE = '';\nconst TMDB_IMAGE_BASE = 'https://image.tmdb.org/t/p/w500';\n\n// DOM helpers\nconst $ = (selector) => document.querySelector(selector);\nconst $$ = (selector) => document.querySelectorAll(selector);\n\n// Show/hide elements\nconst show = (element) => element?.classList.remove('hidden');\nconst hide = (element) => element?.classList.add('hidden');\n\n// Initialize app based on current page\ndocument.addEventListener('DOMContentLoaded', () => {\n    const currentPage = window.location.pathname.split('/').pop() || 'index.html';\n    \n    switch (currentPage) {\n        case 'index.html':\n        case '':\n            initHomePage();\n            break;\n        case 'watchlist.html':\n            initWatchlistPage();\n            break;\n        case 'watched.html':\n            initWatchedPage();\n            break;\n        case 'film.html':\n            initFilmPage();\n            break;\n    }\n});\n\n// Home Page Functions\nfunction initHomePage() {\n    const searchInput = $('#searchInput');\n    const clearSearchBtn = $('#clearSearch');\n    const searchHint = $('#searchHint');\n    const resultsGrid = $('#resultsGrid');\n    const loadingRow = $('#loadingRow');\n    const emptyState = $('#emptyState');\n\n    if (!searchInput) return;\n\n    // Search input handler\n    searchInput.addEventListener('input', (e) => {\n        const query = e.target.value.trim();\n        \n        if (query.length === 0) {\n            clearSearch();\n            return;\n        }\n\n        show(clearSearchBtn);\n        hide(searchHint);\n        \n        // Debounce search\n        clearTimeout(searchTimeout);\n        searchTimeout = setTimeout(() => {\n            searchMovies(query);\n        }, 300);\n    });\n\n    // Clear search button\n    clearSearchBtn?.addEventListener('click', clearSearch);\n\n    function clearSearch() {\n        searchInput.value = '';\n        hide(clearSearchBtn);\n        show(searchHint);\n        resultsGrid.innerHTML = '';\n        show(emptyState);\n        emptyState.textContent = 'Start typing to search for a movie.';\n    }\n\n    async function searchMovies(query) {\n        show(loadingRow);\n        hide(emptyState);\n        resultsGrid.innerHTML = '';\n\n        try {\n            const response = await fetch(`${API_BASE}/api/search?q=${encodeURIComponent(query)}`);\n            const movies = await response.json();\n\n            hide(loadingRow);\n\n            if (!movies || movies.length === 0) {\n                show(emptyState);\n                emptyState.textContent = 'No movies found. Try a different search.';\n                return;\n            }\n\n            displaySearchResults(movies);\n        } catch (error) {\n            console.error('Search error:', error);\n            hide(loadingRow);\n            show(emptyState);\n            emptyState.textContent = 'Error searching movies. Please try again.';\n        }\n    }\n\n    function displaySearchResults(movies) {\n        // Filter out any adult content as an additional safety measure\n        const filteredMovies = movies.filter(movie => !movie.adult);\n        \n        resultsGrid.innerHTML = filteredMovies.map(movie => `\n            <div class=\"movie-card poster-hover\">\n                <div onclick=\"goToMovieDetails(${movie.id})\" class=\"movie-poster-link\" style=\"cursor: pointer;\">\n                    <img \n                        src=\"${movie.poster_path ? TMDB_IMAGE_BASE + movie.poster_path : '/api/placeholder/300/450'}\" \n                        alt=\"${movie.title}\"\n                        class=\"movie-card-poster\"\n                        onerror=\"this.src='/api/placeholder/300/450'\"\n                    >\n                </div>\n                <div class=\"movie-card-content\">\n                    <h3 class=\"movie-card-title\">${movie.title}</h3>\n                    <p class=\"movie-card-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown'}</p>\n                    <div style=\"margin-top: 0.5rem; display: flex; gap: 0.5rem; flex-wrap: wrap;\">\n                        <button onclick=\"addToList('watchlist', ${movie.id}, ${JSON.stringify(movie).replace(/\"/g, '&quot;')})\" class=\"btn btn-primary\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem;\">\n                            Watchlist\n                        </button>\n                        <button onclick=\"addToList('watched', ${movie.id}, ${JSON.stringify(movie).replace(/\"/g, '&quot;')})\" class=\"btn btn-secondary\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem;\">\n                            Watched\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n}\n\n// Watchlist Page Functions\nfunction initWatchlistPage() {\n    const watchlistGrid = $('#watchlistGrid');\n    const emptyWatchlist = $('#emptyWatchlist');\n    const clearWatchlistBtn = $('#clearWatchlist');\n\n    loadMoviesByList('watchlist', watchlistGrid, emptyWatchlist);\n\n    clearWatchlistBtn?.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear your entire watchlist?')) {\n            clearMoviesList('watchlist');\n        }\n    });\n}\n\n// Watched Page Functions\nfunction initWatchedPage() {\n    const watchedGrid = $('#watchedGrid');\n    const emptyWatched = $('#emptyWatched');\n    const clearWatchedBtn = $('#clearWatched');\n\n    loadMoviesByList('watched', watchedGrid, emptyWatched);\n\n    clearWatchedBtn?.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear your entire watched list?')) {\n            clearMoviesList('watched');\n        }\n    });\n}\n\n// Film Details Page Functions\nfunction initFilmPage() {\n    const movieId = getMovieIdFromUrl();\n    if (movieId) {\n        loadMovieDetails(movieId);\n    }\n}\n\n// Shared Functions\nasync function loadMoviesByList(listType, gridElement, emptyElement) {\n    if (!gridElement || !emptyElement) return;\n\n    try {\n        const response = await fetch(`${API_BASE}/api/movies`);\n        const allMovies = await response.json();\n        const filteredMovies = allMovies.filter(movie => movie.list_name === listType);\n\n        if (filteredMovies.length === 0) {\n            show(emptyElement);\n            gridElement.innerHTML = '';\n            return;\n        }\n\n        hide(emptyElement);\n        displayMovieGrid(filteredMovies, gridElement, listType);\n    } catch (error) {\n        console.error(`Error loading ${listType}:`, error);\n        show(emptyElement);\n        emptyElement.textContent = `Error loading ${listType}. Please refresh the page.`;\n    }\n}\n\nfunction displayMovieGrid(movies, gridElement, listType = null) {\n    gridElement.innerHTML = movies.map(movie => {\n        // Use poster_path from our database or construct TMDB URL from stored path\n        let posterSrc = '/api/placeholder/300/450';\n        if (movie.poster_path) {\n            // If it's already a full URL, use it; otherwise construct TMDB URL\n            posterSrc = movie.poster_path.startsWith('http') ? movie.poster_path : TMDB_IMAGE_BASE + movie.poster_path;\n        }\n        \n        // Determine what actions to show based on current list\n        let actionButtons = '';\n        if (listType === 'watchlist') {\n            actionButtons = `\n                <div style=\"margin-top: 0.75rem; display: flex; gap: 0.5rem; flex-wrap: wrap;\">\n                    <button onclick=\"moveToWatched(${movie.id})\" class=\"btn btn-secondary\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem; flex: 1;\">\n                        ‚úì Mark as Watched\n                    </button>\n                    <button onclick=\"removeFromCollection(${movie.id})\" class=\"btn clear-btn-main\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem;\">\n                        Remove\n                    </button>\n                </div>\n            `;\n        } else if (listType === 'watched') {\n            actionButtons = `\n                <div style=\"margin-top: 0.75rem; display: flex; gap: 0.5rem; flex-wrap: wrap;\">\n                    <button onclick=\"moveToWatchlist(${movie.id})\" class=\"btn btn-primary\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem; flex: 1;\">\n                        ‚Üê Back to Watchlist\n                    </button>\n                    <button onclick=\"removeFromCollection(${movie.id})\" class=\"btn clear-btn-main\" style=\"font-size: 0.75rem; padding: 0.25rem 0.5rem;\">\n                        Remove\n                    </button>\n                </div>\n            `;\n        }\n        \n        return `\n            <div class=\"movie-card poster-hover\">\n                <a href=\"film.html?id=${movie.tmdb_id}\" class=\"movie-poster-link\">\n                    <img \n                        src=\"${posterSrc}\" \n                        alt=\"${movie.title}\"\n                        class=\"movie-card-poster\"\n                        onerror=\"this.src='/api/placeholder/300/450'\"\n                    >\n                </a>\n                <div class=\"movie-card-content\">\n                    <h3 class=\"movie-card-title\">${movie.title}</h3>\n                    <p class=\"movie-card-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Year unknown'}</p>\n                    ${movie.user_rating ? `<p class=\"movie-card-year\">‚≠ê ${movie.user_rating}/10</p>` : ''}\n                    ${actionButtons}\n                </div>\n            </div>\n        `;\n    }).join('');\n}\n\nasync function loadMovieDetails(tmdbId) {\n    const movieDetails = $('#movieDetails');\n    if (!movieDetails) return;\n\n    // Show loading state\n    movieDetails.innerHTML = '<p>Loading movie details...</p>';\n\n    try {\n        // First try to get from our database\n        const dbResponse = await fetch(`${API_BASE}/api/movies`);\n        const userMovies = await dbResponse.json();\n        const userMovie = userMovies.find(movie => movie.tmdb_id == tmdbId);\n\n        let tmdbMovie;\n        \n        if (userMovie) {\n            // If we have the movie in our database, search by title for more reliable results\n            const tmdbResponse = await fetch(`${API_BASE}/api/search?q=${encodeURIComponent(userMovie.title)}`);\n            const tmdbMovies = await tmdbResponse.json();\n            tmdbMovie = tmdbMovies.find(movie => movie.id == tmdbId) || tmdbMovies[0];\n        } else {\n            // If we don't have it in database, get directly by TMDB ID\n            const tmdbResponse = await fetch(`${API_BASE}/api/movie/${tmdbId}`);\n            if (tmdbResponse.ok) {\n                tmdbMovie = await tmdbResponse.json();\n            }\n        }\n\n        if (!tmdbMovie) {\n            movieDetails.innerHTML = '<div class=\"empty-state\">Movie not found. Please try searching from the home page.</div>';\n            return;\n        }\n\n        displayMovieDetails(tmdbMovie, userMovie);\n    } catch (error) {\n        console.error('Error loading movie details:', error);\n        movieDetails.innerHTML = '<div class=\"empty-state\">Error loading movie details. Please try again.</div>';\n    }\n}\n\nfunction displayMovieDetails(movie, userMovie) {\n    const movieDetails = $('#movieDetails');\n    const isInCollection = !!userMovie;\n\n    // Handle genres - TMDB API returns different formats\n    let genresDisplay = '';\n    if (movie.genres && movie.genres.length > 0) {\n        // Direct API call returns genre objects with name property\n        genresDisplay = `\n            <div class=\"details-genres\">\n                ${movie.genres.map(genre => `<span class=\"genre-tag\">${genre.name}</span>`).join('')}\n            </div>\n        `;\n    } else if (movie.genre_ids && movie.genre_ids.length > 0) {\n        // Search API returns genre IDs\n        genresDisplay = `\n            <div class=\"details-genres\">\n                ${movie.genre_ids.map(genreId => `<span class=\"genre-tag\">Genre ${genreId}</span>`).join('')}\n            </div>\n        `;\n    }\n\n    movieDetails.innerHTML = `\n        <div class=\"movie-details-grid\">\n            <div>\n                <img \n                    src=\"${movie.poster_path ? TMDB_IMAGE_BASE + movie.poster_path : '/api/placeholder/300/450'}\" \n                    alt=\"${movie.title}\"\n                    class=\"movie-card-poster\"\n                    style=\"border-radius: 1rem;\"\n                    onerror=\"this.src='/api/placeholder/300/450'\"\n                >\n            </div>\n            <div class=\"details-info\">\n                <h1 class=\"details-title\">${movie.title}</h1>\n                <p class=\"details-year\">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'Year unknown'}</p>\n                \n                ${movie.vote_average ? `<p>‚≠ê ${movie.vote_average.toFixed(1)}/10 (TMDB Rating)</p>` : ''}\n                ${userMovie?.user_rating ? `<p>üéØ Your Rating: ${userMovie.user_rating}/10</p>` : ''}\n                ${userMovie?.no_of_times_watched > 0 ? `<p>üëÅÔ∏è Watched ${userMovie.no_of_times_watched} time(s)</p>` : ''}\n                \n                <h3 class=\"details-plot-title\">Plot</h3>\n                <p class=\"details-plot\">${movie.overview || 'No plot description available.'}</p>\n                \n                ${genresDisplay}\n                \n                <div style=\"margin-top: 2rem; display: flex; gap: 1rem; flex-wrap: wrap;\">\n                    ${!isInCollection ? `\n                        <button onclick=\"addToList('watchlist', ${movie.id}, ${JSON.stringify(movie).replace(/\"/g, '&quot;')})\" class=\"btn btn-primary\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Add to Watchlist\n                        </button>\n                        <button onclick=\"addToList('watched', ${movie.id}, ${JSON.stringify(movie).replace(/\"/g, '&quot;')})\" class=\"btn btn-secondary\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Mark as Watched\n                        </button>\n                    ` : `\n                        <p style=\"color: #6ee7b7;\">‚úì In your ${userMovie.list_name} list</p>\n                        <button onclick=\"removeFromCollection(${userMovie.id})\" class=\"btn clear-btn-main\" style=\"padding: 0.75rem 1.5rem; border-radius: 0.5rem;\">\n                            Remove from Collection\n                        </button>\n                    `}\n                </div>\n                \n                ${userMovie?.user_review ? `\n                    <div style=\"margin-top: 1.5rem; padding: 1rem; background-color: rgba(255,255,255,0.05); border-radius: 0.5rem;\">\n                        <h4>Your Review:</h4>\n                        <p style=\"color: rgba(255,255,255,0.8); margin-top: 0.5rem;\">${userMovie.user_review}</p>\n                    </div>\n                ` : ''}\n            </div>\n        </div>\n    `;\n}\n\n// Action Functions\nasync function addToList(listType, tmdbId, movieData = null) {\n    try {\n        let movie = movieData;\n        \n        // If no movie data provided, try to fetch it\n        if (!movie) {\n            try {\n                // First try to get movie directly by TMDB ID\n                const directResponse = await fetch(`${API_BASE}/api/movie/${tmdbId}`);\n                if (directResponse.ok) {\n                    movie = await directResponse.json();\n                } else {\n                    // Fallback: try searching by ID (less reliable)\n                    const searchResponse = await fetch(`${API_BASE}/api/search?q=${tmdbId}`);\n                    const movies = await searchResponse.json();\n                    movie = movies.find(m => m.id == tmdbId) || movies[0];\n                }\n            } catch (fetchError) {\n                console.error('Error fetching movie data:', fetchError);\n            }\n        }\n\n        if (!movie) {\n            alert('Movie not found. Please try searching again.');\n            return;\n        }\n        \n        // Filter out adult content\n        if (movie.adult) {\n            alert('This content is not available.');\n            return;\n        }\n\n        // Handle genres from different API responses\n        let genreString = '';\n        if (movie.genre_ids && movie.genre_ids.length > 0) {\n            // Search API returns genre IDs\n            genreString = movie.genre_ids.join(',');\n        } else if (movie.genres && movie.genres.length > 0) {\n            // Direct API returns genre objects with names\n            genreString = movie.genres.map(g => g.name).join(',');\n        }\n\n        const dbMovieData = {\n            tmdb_id: movie.id,\n            title: movie.title,\n            director: '',\n            actors: '',\n            description: movie.overview || '',\n            genre: genreString,\n            list_name: listType,\n            no_of_times_watched: listType === 'watched' ? 1 : 0,\n            user_rating: null,\n            user_review: '',\n            poster_path: movie.poster_path || '',\n            release_date: movie.release_date || ''\n        };\n\n        const addResponse = await fetch(`${API_BASE}/api/movies`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(dbMovieData)\n        });\n\n        const result = await addResponse.json();\n\n        if (addResponse.ok) {\n            alert(`Movie added to ${listType}!`);\n            window.location.reload();\n        } else {\n            alert('Error adding movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error adding movie:', error);\n        alert('Error adding movie to collection.');\n    }\n}\n\nasync function removeFromCollection(movieId) {\n    if (!confirm('Are you sure you want to remove this movie from your collection?')) {\n        return;\n    }\n\n    try {\n        const response = await fetch(`${API_BASE}/api/movies/${movieId}`, {\n            method: 'DELETE'\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            alert('Movie removed from collection!');\n            window.location.reload();\n        } else {\n            alert('Error removing movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error removing movie:', error);\n        alert('Error removing movie from collection.');\n    }\n}\n\nasync function clearMoviesList(listType) {\n    try {\n        const response = await fetch(`${API_BASE}/api/movies`);\n        const allMovies = await response.json();\n        const moviesToDelete = allMovies.filter(movie => movie.list_name === listType);\n\n        for (const movie of moviesToDelete) {\n            await fetch(`${API_BASE}/api/movies/${movie.id}`, {\n                method: 'DELETE'\n            });\n        }\n\n        alert(`${listType} cleared!`);\n        window.location.reload();\n    } catch (error) {\n        console.error(`Error clearing ${listType}:`, error);\n        alert(`Error clearing ${listType}.`);\n    }\n}\n\n// Move movie from watchlist to watched\nasync function moveToWatched(movieId) {\n    try {\n        const response = await fetch(`${API_BASE}/api/movies/${movieId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                list_name: 'watched',\n                no_of_times_watched: 1\n            })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            alert('Movie moved to watched list!');\n            window.location.reload();\n        } else {\n            alert('Error moving movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error moving movie to watched:', error);\n        alert('Error moving movie to watched list.');\n    }\n}\n\n// Move movie from watched back to watchlist\nasync function moveToWatchlist(movieId) {\n    try {\n        const response = await fetch(`${API_BASE}/api/movies/${movieId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                list_name: 'watchlist',\n                no_of_times_watched: 0\n            })\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n            alert('Movie moved back to watchlist!');\n            window.location.reload();\n        } else {\n            alert('Error moving movie: ' + (result.error || 'Unknown error'));\n        }\n    } catch (error) {\n        console.error('Error moving movie to watchlist:', error);\n        alert('Error moving movie to watchlist.');\n    }\n}\n\n// Navigation Functions\nfunction goToMovieDetails(tmdbId) {\n    window.location.href = `film.html?id=${tmdbId}`;\n}\n\nfunction getMovieIdFromUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('id');\n}\n\n// Export functions for global access\nwindow.addToList = addToList;\nwindow.removeFromCollection = removeFromCollection;\nwindow.goToMovieDetails = goToMovieDetails;\nwindow.moveToWatched = moveToWatched;\nwindow.moveToWatchlist = moveToWatchlist;\n","size_bytes":21086},"public/styles.css":{"content":"/* Base Styles */\n* {\n    box-sizing: border-box;\n}\n\nhtml {\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n    background-color: #0c0a09;\n    color: #fff;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden; /* Prevent horizontal scrolling */\n}\n\n/* Reusable UI Elements */\n.min-h-screen { min-height: 100vh; }\n.header-container { max-width: 80rem; margin: 0 auto; padding: 1rem 1.25rem; display: flex; align-items: center; gap: 1rem; }\nmain { max-width: 80rem; margin: 0 auto; padding: 2rem 1.25rem; }\n.main-header { margin-bottom: 2rem; }\n.main-header h1 { font-size: 2.25rem; font-weight: 800; line-height: 1.25; }\n.main-header p { color: rgba(255, 255, 255, 0.6); margin-top: 0.5rem; }\n.list-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 2rem; }\n.list-header h2 { font-size: 1.5rem; font-weight: 800; }\n.list-header p { color: rgba(255, 255, 255, 0.6); margin-top: 0.25rem; }\n\n/* Navbar */\nheader { position: sticky; top: 0; z-index: 40; backdrop-filter: blur(10px); background-color: rgba(0, 0, 0, 0.4); border-bottom: 1px solid rgba(255, 255, 255, 0.1); }\nnav { margin-left: auto; display: flex; align-items: center; gap: 0.5rem; }\n.nav-btn { padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; transition: background-color 0.2s ease; text-decoration: none; color: inherit; }\n.nav-btn:hover { background-color: rgba(255, 255, 255, 0.05); }\n.nav-btn.active { background-color: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.1); }\n.brand-link { display: flex; align-items: center; gap: 0.75rem; }\n.brand-icon { display: flex; align-items: center; justify-content: center; width: 2.25rem; height: 2.25rem; border-radius: 0.5rem; background-color: rgba(16, 185, 129, 0.15); border: 1px solid rgba(110, 231, 183, 0.3); color: #6ee7b7; }\n.brand-text { font-weight: 800; letter-spacing: -0.025em; font-size: 1.25rem; }\n\n/* Search Bar */\n.search-wrap { position: relative; }\n.search-bar { display: flex; align-items: center; gap: 0.75rem; background-color: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 1rem; padding: 0.75rem 1rem; }\n.search-icon { color: rgba(255, 255, 255, 0.6); }\n.search-input { width: 100%; background-color: transparent; outline: none; border: none; font-size: 1rem; }\n.search-input::placeholder { color: rgba(255, 255, 255, 0.4); }\n.clear-btn { color: rgba(255, 255, 255, 0.6); font-size: 0.875rem; padding: 0.5rem; border-radius: 0.5rem; transition: background-color 0.2s ease; }\n.clear-btn:hover { background-color: rgba(255, 255, 255, 0.1); }\n.search-hint { color: rgba(255, 255, 255, 0.5); font-size: 0.875rem; margin-top: 0.5rem; }\n\n/* Grids and Empty States */\n.results-wrap { margin-top: 2rem; }\n.results-grid { display: grid; gap: 1.25rem; grid-template-columns: repeat(2, minmax(0, 1fr)); }\n@media (min-width: 640px) { .results-grid { grid-template-columns: repeat(3, minmax(0, 1fr)); } }\n@media (min-width: 1024px) { .results-grid { grid-template-columns: repeat(5, minmax(0, 1fr)); } }\n.empty-state { text-align: center; margin-top: 4rem; color: rgba(255, 255, 255, 0.6); }\n\n/* Movie Cards */\n.movie-card { \n    border-radius: 1rem; \n    overflow: hidden; \n    background-color: rgba(255, 255, 255, 0.05); \n    border: 1px solid rgba(255, 255, 255, 0.1); \n    transform: translateZ(0); /* Force hardware acceleration */\n    backface-visibility: hidden; /* Prevent flickering */\n}\n.movie-poster-link { display: block; }\n.movie-card-poster { \n    width: 100%; \n    aspect-ratio: 2 / 3; \n    object-fit: cover; \n    border-top-left-radius: 1rem; \n    border-top-right-radius: 1rem;\n    display: block;\n}\n.movie-card-content { padding: 1rem; min-height: 4rem; }\n.movie-card-title { \n    font-weight: 600; \n    line-height: 1.25; \n    overflow: hidden; \n    white-space: nowrap; \n    text-overflow: ellipsis;\n    margin-bottom: 0.25rem;\n}\n.movie-card-year { font-size: 0.875rem; color: rgba(255, 255, 255, 0.6); }\n\n/* Buttons */\n.btn { transition: background-color 0.2s ease, opacity 0.15s ease; border: none; cursor: pointer; }\n.btn:hover { opacity: 0.9; }\n.btn:active { opacity: 0.8; }\n.btn-primary { background-color: rgba(16, 185, 129, 0.2); color: #6ee7b7; border: 1px solid rgba(110, 231, 183, 0.3); }\n.btn-primary:hover { background-color: rgba(16, 185, 129, 0.3); }\n.btn-secondary { background-color: rgba(14, 165, 233, 0.2); color: #38bdf8; border: 1px solid rgba(56, 189, 248, 0.3); }\n.btn-secondary:hover { background-color: rgba(14, 165, 233, 0.3); }\n.clear-btn-main { font-size: 0.875rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; background-color: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); }\n.clear-btn-main:hover { background-color: rgba(255, 255, 255, 0.1); }\n\n/* Film Details Page */\n.details-container { max-width: 50rem; margin: 0 auto; }\n.back-btn-container { margin-bottom: 2rem; }\n.back-btn { display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; background-color: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); }\n.back-btn:hover { background-color: rgba(255, 255, 255, 0.1); }\n.movie-details-grid { display: grid; gap: 1.5rem; grid-template-columns: 1fr; }\n@media (min-width: 768px) { .movie-details-grid { grid-template-columns: 1fr 2fr; } }\n.details-info { display: flex; flex-direction: column; gap: 1rem; }\n.details-title { font-size: 2.25rem; font-weight: 800; line-height: 1.2; }\n.details-year { color: rgba(255, 255, 255, 0.6); }\n.details-plot-title { font-size: 1.125rem; font-weight: 600; margin-top: 1.5rem; }\n.details-plot { color: rgba(255, 255, 255, 0.7); line-height: 1.6; }\n.details-director-actors { display: grid; grid-template-columns: 1fr; gap: 1rem; margin-top: 1.5rem; }\n@media (min-width: 768px) { .details-director-actors { grid-template-columns: repeat(2, 1fr); } }\n.details-director-actors h3 { font-size: 1.125rem; font-weight: 600; }\n.details-director-actors p { color: rgba(255, 255, 255, 0.7); margin-top: 0.25rem; }\n.details-genres { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.75rem; }\n.genre-tag { font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 9999px; border: 1px solid rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.7); }\n\n/* Shimmer Loading */\n.shimmer-card { aspect-ratio: 2 / 3; border-radius: 1rem; background: linear-gradient(90deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.14), rgba(255, 255, 255, 0.06)); background-size: 200% 100%; animation: shimmer 1.1s linear infinite; }\n@keyframes shimmer { from { background-position: 200% 0; } to { background-position: -200% 0; } }\n\n/* Poster Hover */\n.poster-hover { transition: transform 0.15s ease, opacity 0.15s ease; }\n.poster-hover:hover { transform: translateY(-2px); opacity: 0.9; }\n\n/* Utility Classes */\n.hidden { display: none !important; }\n.mr-2 { margin-right: 0.5rem; }\n\n/* Responsive Adjustments */\n@media (min-width: 768px) {\n    .main-header h1 { font-size: 2.5rem; }\n    .main-header p { font-size: 1rem; }\n    .list-header h2 { font-size: 1.875rem; }\n    .list-header p { font-size: 1rem; }\n}\n","size_bytes":7214}},"version":1}